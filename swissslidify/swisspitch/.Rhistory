1.96*4/10+12
1.645*4/10+12
?anova
mean(140,138)
mean(c(140,138))
mean(c(140,138,150,148,135))
sd(c(140,138,150,148,135))
m0<-mean(c(140,138,150,148,135))
s0<-sd(c(140,138,150,148,135))
m1<-mean(c(132,135,151,146,130))
z<-(m1-m0)*sqrt(5)/s0
t.test(c(140,138,150,148,135),c(132,135,151,146,130),paired=T)
t.test(c(140,138,150,148,135),c(132,135,151,146,130))
t.test(c(140,138,150,148,135),c(132,135,151,146,130),paired=T)
1.96*30/3
pbinom(2,size=4,prob=0.5,lower.tail=F)
?ppoiss
?ppois
?pbinom
?ppois
pbinom(10,size=1787,prob=0.01,lower.tail=F)
pbinom(9,size=1787,prob=0.01,lower.tail=F)
pbinom(9,size=1787,prob=0.01,lower.tail=T)
pbinom(1777,size=1787,prob=0.01,lower.tail=F)
pbinom(1776,size=1787,prob=0.01,lower.tail=F)
pbinom(10,size=1787,prob=0.01,lower.tail=F)
pbinom(9,size=1787,prob=0.01,lower.tail=F)
1-pbinom(9,size=1787,prob=0.01,lower.tail=F)
pbinom(9,size=1787,prob=0.01,lower.tail=T)
pbinom(10,size=1787,prob=0.01,lower.tail=T)
ppois(9,17.87,lower.tail=F)
1-ppois(9,17.87,lower.tail=F)
1-ppois(9,17.87,lower.tail=T)
ppois(10,17.87,lower.tail=T)
1-0.0542
(1.645-1.28)*0.04/0.01
1.46*1.46
(44-42.04)/12*sqrt(288)
1.645*4/10+
12
1.96*30/3
power.t.test(sig.level=0.05,power=0.85,delta=2.1,n=NULL,sd=1)
power.t.test(sig.level=0.05,power=0.9,delta=0.01,n=NULL,sd=0.04)
power.t.test(sig.level=0.1,power=0.9,delta=0.01,n=NULL,sd=0.04)
power.t.test(sig.level=0.01,power=0.9,delta=0.01,n=NULL,sd=0.04)
power.t.test(sig.level=0.01,power=0.9,delta=0.01,n=NULL,sd=0.04,two.sided=F)
power.t.test(sig.level=0.01,power=0.9,delta=0.01,n=NULL,sd=0.04,alternative="one.sided")
power.t.test(sig.level=0.05,power=0.9,delta=0.01,n=NULL,sd=0.04,alternative="one.sided")
power.t.test(sig.level=0.05,power=NULL,delta=0.01,n=200,sd=0.04,alternative="one.sided")
?t.test
1.96-1
1.645*4/10-12
qnorm(0.99)
qnorm(0.99,3,1)
qnorm(0.99,1,3)
1*.1+10*.9
1-pbinom(13,0.01,1000,T)
1-pbinom(13,1000,0.01,T)
pbinom(6,1000,0.01,F)
1-pbinom(13,800,0.01,T)
sqrt(.95)
0.99*0.99
0.94*0.06*2
0.94*0.94
0.94*0.03
0.94*0.02
0.94*0.01
0.03*0.03
0.03*0.02
0.03*0.01
0.03*0.03
0.94*0.02
0.94*0.03
0.94*0.01
88.36+2.82+2.82
88.36+2.82+2.82+0.9
1.88*4+0.9*9+0.03*11+0.06*6+0.02*15
2*(1.88*4+0.9*9+0.03*11+0.06*6+0.02*15)+0.4*10+0.01*20
2*(1.88*4+0.9*9+0.03*11+0.06*6+0.02*15)+0.4*10+0.01*20/5
2*(1.88*4+0.9*9+0.03*11+0.06*6+0.02*15)+0.4*10+0.01*20
(2*(1.88*4+0.9*9+0.03*11+0.06*6+0.02*15)+0.4*10+0.01*20)/5
53.768-47.317
39.709/(1-30.204)
39.709/(100-30.204)
1.2*170/670 + 1.4*300/670 + 3.3*60/670 + 0.6*380/240 + .999*1300/670
35.97-31.63
350000-0.85*120000
248/350
qnorm(0.975,1,3)
3/95
a<-c(93,2,3,2)
a*a
a %*% a
a %o% a
b<-a %o% a
lower.tri(b)
b+b-diag(b)
diag(b)
b+b-diag.spam(b)
b+b
86.49+3.72
86.49+3.72+5.58
86.49+3.72+5.58+0.04
(0.04*20+0.12*15+10*0.09+0.08*11+0.12*6+3.72*9+4*(0.83))/5
source('C:/Users/Enrique.Balp/Desktop/Finanzas/Credit Risk/merton_solve.R')
pnorm(-d2)
source('C:/Users/Enrique.Balp/Desktop/Finanzas/Credit Risk/merton_solve.R')
pnorm(-d2)
source('C:/Users/Enrique.Balp/Desktop/Finanzas/Credit Risk/merton_solve.R')
pnorm(-d2)
source('C:/Users/Enrique.Balp/Desktop/Finanzas/Credit Risk/merton_solve.R')
pnorm(-d2)
source('C:/Users/Enrique.Balp/Desktop/Finanzas/Credit Risk/merton_solve.R')
pnorm(-d2)
source('C:/Users/Enrique.Balp/Desktop/Finanzas/Credit Risk/merton_solve.R')
source('C:/Users/Enrique.Balp/Desktop/Finanzas/Credit Risk/merton_solve.R')
pnorm(-d2)
source('C:/Users/Enrique.Balp/Desktop/Finanzas/Credit Risk/merton_solve.R')
pnorm(-d2)
15*(0.3*qnorm(0.02)-0.06+0.09/2)
pnorm(qnorm(0.45))
qnorm(0.02)
d2<--1*qnorm(0.02)
d2
d2*0.3+(0.06-0.03*0.03/2)
e<-d2*0.3+(0.06-0.03*0.03/2)
exp(e)
c<-exp(e)
15/c
source('C:/Users/Enrique.Balp/Desktop/Finanzas/Credit Risk/merton_solve.R')
pnorm(-d2)
pnorm(-d2)
source('C:/Users/Enrique.Balp/Desktop/Finanzas/Credit Risk/merton_solve.R')
pnorm(-d2)
source('C:/Users/Enrique.Balp/Desktop/Finanzas/Credit Risk/merton_solve.R')
pnorm(-d2)
source('C:/Users/Enrique.Balp/Desktop/Finanzas/Credit Risk/merton_solve.R')
pnorm(-d2)
source('C:/Users/Enrique.Balp/Desktop/Finanzas/Credit Risk/merton_solve.R')
pnorm(-d2)
source('C:/Users/Enrique.Balp/Desktop/Finanzas/Credit Risk/merton_solve.R')
pnorm(-d2)
source('C:/Users/Enrique.Balp/Desktop/Finanzas/Credit Risk/merton_solve.R')
pnorm(-d2)
source('C:/Users/Enrique.Balp/Desktop/Finanzas/Credit Risk/merton_solve.R')
pnorm(-d2)
source('C:/Users/Enrique.Balp/Desktop/Finanzas/Credit Risk/merton_solve.R')
pnorm(-d2)
source('C:/Users/Enrique.Balp/Desktop/Finanzas/Credit Risk/merton_solve.R')
pnorm(-d2)
source('C:/Users/Enrique.Balp/Desktop/Finanzas/Credit Risk/merton_solve.R')
pnorm(-d2)
source('C:/Users/Enrique.Balp/Desktop/Finanzas/Credit Risk/merton_solve.R')
pnorm(-d2)
source('C:/Users/Enrique.Balp/Desktop/Finanzas/Credit Risk/merton_solve.R')
pnorm(-d2)
source('C:/Users/Enrique.Balp/Desktop/Finanzas/Credit Risk/merton_solve.R')
pnorm(-d2)
source('C:/Users/Enrique.Balp/Desktop/Finanzas/Credit Risk/merton_solve.R')
pnorm(-d2)
qnorm(0.19)
qnorm(0.95)
.12/.13
log(.12/.13)
log(.12/.13)/(-35)
qnorm(0.0006)
qnorm(1-0.0006-0.0282)
qnorm(1-0.0006)
0.03+0.13*exp(-35*0.01)
ro<-0.03+0.13*exp(-35*0.01)
WCDR<-pnorm((qnorm(0.01)+sqrt(ro)*qnorm(0.999))/sqrt(1-ro))
WCDR
200*0.7*(WCDR-0.01)*12.5
200*0.7*(pnorm((qnorm(0.01)+sqrt(ro)*qnorm(0.999))/sqrt(1-ro))-0.01)*12.5
200*0.7*(pnorm((qnorm(0.01)+sqrt(ro)*qnorm(0.999))/sqrt(1-ro))-0.01)
200*0.7*(pnorm((qnorm(0.01)+sqrt(ro)*qnorm(0.999))/sqrt(1-ro))-0.01)*12.5*0.08
ro<-0.12(1+exp(-50*0.003))
ro<-0.12*(1+exp(-50*0.003))
ro
b<-(0.11852-0.05478*log(0.003))^2
MA<-(1+(3 - 2.5)*b)/(1-1.5*b)
CR<-500*0.6*(WCDR-0.003)*MA
WCDR<-pnorm((qnorm(0.003)+sqrt(ro)*qnorm(0.999))/sqrt(1-ro))
CR<-500*0.6*(WCDR-0.003)*MA
CR
CR*12.5
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
x*w
sum(x*w)/4
mean(x)
?solve
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
coef(lm(x~y))
coef(lm(x~y -1))
coef(lm(y ~ x -1))
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
x*w
mean(x*w)
sum(x*w)/sum(x)
sum(x*w)/sum(w)
data(mtcars)
mtcars
coef(lm(mpg ~ weight))
with(mtcars,coef(lm(mpg ~ weight)))
coef(lm(mtcars$mpg ~ mtcars$weight))
mtcars$mpg
coef(lm(mtcars$mpg ~ mtcars$weights))
coef(lm(mtcars$mpg ~ mtcars$wt))
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
(x-mean(x))/sd(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit<-lm(y~x)
summary(fit)$coefficients
summary(fit)$sigma
fit<-lm(mtcars$mpg ~ mtcars$wt)
summary(fit)
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[1, 2]
sumCoef <- summary(fit)$coefficients
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[1, 2]
fit$df
predict(fit,mean(mtcars$wt))
mtcars$wt
mean(mtcars$wt)
newdata <- data.frame(wt=mean(mtcars$wt))
newdata
p2 <- predict(fit, newdata, interval = ("prediction"))
newdata
fit
p2
p2[,3]
p2 <- predict(fit, newdata, interval = ("prediction"))
fit
newdata <- data.frame(mtcars$wt=mean(mtcars$wt))
plot(mtcars$mpg,mtcars$wt)
plot(mtcars$wt,mtcars$mpg)
mean(mtcars$wt)
?mtcars
fit
fit$sigma
fit
coef(fit)
fit
coef(fit)$sigma
summary(fit)
summary(fit)$sigma
fit2<-lm(mtcars$mpg ~ mtcars$wt -1)
summary(fit2)$sigma
(summary(fit2)$sigma/summary(fit)$sigma)^2
(summary(fit)$sigma/summary(fit2)$sigma)^2
(summary(fit)$sigma/summary(fit2)$sigma)
(summary(fit2)$sigma/summary(fit)$sigma)
summary(fit)
sum(fit$Residuals*fit$Residuals)
fit$Residuals*fit$Residuals
fit$Residuals
summary(fit)$sigma
mtcars$mpg-mean(mtcars$mpg)
sum((mtcars$mpg-mean(mtcars$mpg))^2)
sum((mtcars$mpg-rep(mean(mtcars$mpg),length(mtcars$mpg)))^2)
(summary(fit)$sigma/summary(fit2)$sigma)^2
(summary(fit)$sigma/summary(fit2)$sigma)
(summary(fit)$sigma/summary(fit2)$sigma)^2
(summary(fit)$sigma/summary(fit2)$sigma)
0.01/(1-0.6)
0.006/(1-0.6)
(0.025*10-0.015*5)/5
250/100000*100000
250/100000*10000
?uniroot
qnorm(0.0006)
qnorm(0.0122)
x<-0.01+0.06+0.41+6.22+83.43+7.97+0.59
x
qnorm(1-x)
qnorm(1-x/100)
WCDR <- pnorm((qnorm(0.005)+sqrt(0.15)*qnorm(0.999))/sqrt(1-0.15))
WCDR
WCDR <- pnorm((qnorm(0.02)+sqrt(0.15)*qnorm(0.999))/sqrt(1-0.15))
ro <- 0.12*(1+exp(-50*0.02))
WCDR <- pnorm((qnorm(0.02)+sqrt(ro)*qnorm(0.999))/sqrt(1-ro))
ro
WCDR
ro <- 0.1641
WCDR <- pnorm((qnorm(0.02)+sqrt(ro)*qnorm(0.999))/sqrt(1-ro))
WCDR
WCDR <- 0.1902
CR <- 200*0.7*(WCDR-0.02)*MA
b <- (0.11852 - 0.05478*log(0.02))^2
b
MA <- (1+(1-2.5)*b)/(1-1.5*b)
MA
CR <- 200*0.7*(WCDR-0.02)*MA
CR
options(digits=20)
CR <- 200*0.7*(WCDR-0.02)*MA
options(digits=20)
CR
3000*4/1000000
3000*4/1000000*100
3000*4/100
120/(1-0.4)
120/(1-0.6)
160/(1-0.6)
(5*0.4-2*0.3)/3
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot, s = slider(0, 2, step = 0.1))
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
install.packages(c("rCharts"))
install.packages(c("rcharts"))
install.packages("rcharts")
install.packages("rCharts")
library(rCharts)
data(mtcars)
?mtcars
fit <- lm(mpg ~ cyl + wt, data=mtcars)
summary(fit)
fit <- lm(mpg ~ factor(cyl) + wt, data=mtcars)
summary(fit)
fit <- lm(mpg ~ factor(cyl) + wt, data=mtcars)
fit2 <- lm(mpg ~ factor(cyl), data=mtcars)
summary(fit)
summary(fit2)
fit3 <- lm(mpg ~ factor(cyl)*wt, data=mtcars)
summary(fit3)
anova(fit,fit3)
?I
I(2*0.5)
I(c(3,4)*0.5)
c(3,4)*0.5
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit(y~x)
f<-lm(y~x)
hatvalues(f)
dfbeta(f)
dfbetas(f)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages("caret")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
summary(training)
qplot(CompressiveStrength ~., data=training)
qplot(CompressiveStrength,., data=training)
pairs(training)
featurePlot(x=training,y = training$CompressiveStrength, plot="pairs")
featurePlot(x=training,y = training$CompressiveStrength)
plot(training$CompressiveStrength)
plot(training$CompressiveStrength,col=cut2(Cement,4))
library(Hmisc)
install.packages("Mmisc")
library(Hmisc)
install.packages("Mmisc")
plot(training$CompressiveStrength,col=training$flyAsh)
plot(training$CompressiveStrength)
plot(training$Age)
plot(training$flyAsh)
plot(training$FlyAsh)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$SuperPlasticizer)
hist(training$Superplasticizer)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
names(training)
il<-training["IL",]
names(il)
il<-training[,"IL"]
il<-training[,names="IL"]
il<-training[,c("IL")]
names(training)
which(substring(names(training),1,2))
which(substring(names(training),1,2)=="IL")
il<-training[,which(substring(names(training),1,2)=="IL")]
names(il)
pp<-preProcess(il,method="pca")
pp
summary(pp)
pp<-preProcess(il,method="pca",pcaComp=2)
pp
?preProcess
pp<-preProcess(il,method="pca",thresh=0.8)
pp
il<-training[,c(1,which(substring(names(training),1,2)=="IL"))]
names(il)
pp<-preProcess(il,method="pca",thresh=0.8)
pp<-preProcess(il[,-1],method="pca",thresh=0.8)
pp
names(pp)
trainPC <- predict(pp,il[,-1])
trainPC
modelFit <- train(li$diagnosis ~ ., method="glm", data=trainPC)
modelFit <- train(il$diagnosis ~ ., method="glm", data=trainPC)
install.packages("e1071")
modelFit <- train(il$diagnosis ~ ., method="glm", data=trainPC)
modelFit2 <- train(il$diagnosis ~ ., method="glm", data=il)
summary(modelFit2)
summary(modelFit1)
summary(modelFit)
iltest<-testing[,c(1,which(substring(names(testing),1,2)=="IL"))]
testPC<-predict(pp,iltest[,-1])
cm<-confusionMatrix(iltest$diagnosis,predict(modelFit,testPC))
cm
cm<-confusionMatrix(iltest$diagnosis,predict(modelFit2,testPC))
modelFit2
modelFit2 <- train(il$diagnosis ~ ., method="glm", data=il[,-1])
cm<-confusionMatrix(iltest$diagnosis,predict(modelFit2,iltest[,-1]))
cm
cm2<-confusionMatrix(iltest$diagnosis,predict(modelFit2,iltest[,-1]))
cm<-confusionMatrix(iltest$diagnosis,predict(modelFit,testPC))
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
il<-training[,c(1,which(substring(names(training),1,2)=="IL"))]
pp<-preProcess(il[,-1],method="pca",thresh=0.8)
pp
pp<-preProcess(il[,-1],method="pca",thresh=0.9)
pp
library(MASS)
data(shuttle)
?shuttle
logFit <- glm(shuttle$auto ~ shuttle$wind,family="binomial")
logFit <- glm(use ~ wind,data=shuttle[auto==1],family="binomial")
logFit <- glm(use ~ wind,data=shuttle[which(shuttle$auto==1),],family="binomial")
logFit <- glm(use ~ wind,data=shuttle[,which(shuttle$auto==1)],family="binomial")
logFit <- glm(shuttle$use ~ shuttle$wind,family="binomial")
logFit
exp(logFit$coeff)
logFit2 <- glm(shuttle$use ~ shuttle$wind + shuttle$magn,family="binomial")
exp(logFit2$coeff)
logFit3 <- glm(shuttle$use-1 ~ shuttle$wind,family="binomial")
use0 <- ! shuttle$use
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
set.seed(125)
?segmentationOriginal
names(segmentationOriginal)
q()
source('~/MachineQ5q2.R')
source('~/MachineQ5q2.R')
source('~/MachineQ5q2.R')
source('~/MachineQ5q2.R')
modRF
source('~/MachineQ5q2.R')
predDF <- data.frame(prRF, prBOO, prLDA, diagnosis=testing$diagnosis)
combModFit <- train(diagnosis ~. , method="gam", data=predDF)
combPred<-predict(combModFit, predDF)
sqrt(sum((prRF-testing$diagnosis)^2))
sqrt(sum((prBOO-testing$diagnosis)^2))
sqrt(sum((prLDA-testing$diagnosis)^2))
sqrt(sum((comb$pred-testing$diagnosis)^2))
sqrt(sum((prRF-testing$diagnosis)^2))
sqrt(sum((prBOO-testing$diagnosis)^2))
sqrt(sum((prLDA-testing$diagnosis)^2))
sqrt(sum((combPred$pred-testing$diagnosis)^2))
names(testing)
prRF
prRF-testing$diagnosis
sum(prRF==testing$diagnosis)/length(prRF)
sum(prBOO==testing$diagnosis)/length(prRF)
sum(prLDA==testing$diagnosis)/length(prRF)
sum(combPred==testing$diagnosis)/length(prRF)
source('~/MachineQ5q2.R')
setwd("C:/Users/Enrique.Balp/Desktop/DataScience/shinyapps/swissslidify/swisspitch")
library(slidify)
publish(user = "ebalp", repo = "swiss")
